#ifndef _CkSsh_H
#define _CkSsh_H
#include "Chilkat_C.h"

HCkSsh CkSsh_Create(void);
void CkSsh_Dispose(HCkSsh handle);
int CkSsh_getChannelOpenFailCode(HCkSsh cHandle);
void CkSsh_getChannelOpenFailReason(HCkSsh cHandle, HCkString retval);
void CkSsh_getClientIdentifier(HCkSsh cHandle, HCkString retval);
void CkSsh_putClientIdentifier(HCkSsh cHandle, const char *newVal);
int CkSsh_getConnectTimeoutMs(HCkSsh cHandle);
void CkSsh_putConnectTimeoutMs(HCkSsh cHandle, int newVal);
int CkSsh_getDisconnectCode(HCkSsh cHandle);
void CkSsh_getDisconnectReason(HCkSsh cHandle, HCkString retval);
int CkSsh_getHeartbeatMs(HCkSsh cHandle);
void CkSsh_putHeartbeatMs(HCkSsh cHandle, int newVal);
void CkSsh_getHostKeyFingerprint(HCkSsh cHandle, HCkString retval);
void CkSsh_getHttpProxyAuthMethod(HCkSsh cHandle, HCkString retval);
void CkSsh_putHttpProxyAuthMethod(HCkSsh cHandle, const char *newVal);
void CkSsh_getHttpProxyHostname(HCkSsh cHandle, HCkString retval);
void CkSsh_putHttpProxyHostname(HCkSsh cHandle, const char *newVal);
void CkSsh_getHttpProxyPassword(HCkSsh cHandle, HCkString retval);
void CkSsh_putHttpProxyPassword(HCkSsh cHandle, const char *newVal);
int CkSsh_getHttpProxyPort(HCkSsh cHandle);
void CkSsh_putHttpProxyPort(HCkSsh cHandle, int newVal);
void CkSsh_getHttpProxyUsername(HCkSsh cHandle, HCkString retval);
void CkSsh_putHttpProxyUsername(HCkSsh cHandle, const char *newVal);
int CkSsh_getIdleTimeoutMs(HCkSsh cHandle);
void CkSsh_putIdleTimeoutMs(HCkSsh cHandle, int newVal);
BOOL CkSsh_getIsConnected(HCkSsh cHandle);
BOOL CkSsh_getKeepSessionLog(HCkSsh cHandle);
void CkSsh_putKeepSessionLog(HCkSsh cHandle, BOOL newVal);
void CkSsh_getLastErrorHtml(HCkSsh cHandle, HCkString retval);
void CkSsh_getLastErrorText(HCkSsh cHandle, HCkString retval);
void CkSsh_getLastErrorXml(HCkSsh cHandle, HCkString retval);
int CkSsh_getMaxPacketSize(HCkSsh cHandle);
void CkSsh_putMaxPacketSize(HCkSsh cHandle, int newVal);
int CkSsh_getNumOpenChannels(HCkSsh cHandle);
int CkSsh_getReadTimeoutMs(HCkSsh cHandle);
void CkSsh_putReadTimeoutMs(HCkSsh cHandle, int newVal);
void CkSsh_getSessionLog(HCkSsh cHandle, HCkString retval);
void CkSsh_getSocksHostname(HCkSsh cHandle, HCkString retval);
void CkSsh_putSocksHostname(HCkSsh cHandle, const char *newVal);
void CkSsh_getSocksPassword(HCkSsh cHandle, HCkString retval);
void CkSsh_putSocksPassword(HCkSsh cHandle, const char *newVal);
int CkSsh_getSocksPort(HCkSsh cHandle);
void CkSsh_putSocksPort(HCkSsh cHandle, int newVal);
void CkSsh_getSocksUsername(HCkSsh cHandle, HCkString retval);
void CkSsh_putSocksUsername(HCkSsh cHandle, const char *newVal);
int CkSsh_getSocksVersion(HCkSsh cHandle);
void CkSsh_putSocksVersion(HCkSsh cHandle, int newVal);
BOOL CkSsh_getTcpNoDelay(HCkSsh cHandle);
void CkSsh_putTcpNoDelay(HCkSsh cHandle, BOOL newVal);
BOOL CkSsh_getUtf8(HCkSsh cHandle);
void CkSsh_putUtf8(HCkSsh cHandle, BOOL newVal);
BOOL CkSsh_getVerboseLogging(HCkSsh cHandle);
void CkSsh_putVerboseLogging(HCkSsh cHandle, BOOL newVal);
void CkSsh_getVersion(HCkSsh cHandle, HCkString retval);
BOOL CkSsh_AuthenticatePk(HCkSsh cHandle, const char *username, HCkSshKey privateKey);
BOOL CkSsh_AuthenticatePw(HCkSsh cHandle, const char *login, const char *password);
BOOL CkSsh_ChannelIsOpen(HCkSsh cHandle, int channelNum);
int CkSsh_ChannelPoll(HCkSsh cHandle, int channelNum, int pollTimeoutMs);
int CkSsh_ChannelRead(HCkSsh cHandle, int channelNum);
int CkSsh_ChannelReadAndPoll(HCkSsh cHandle, int channelNum, int pollTimeoutMs);
int CkSsh_ChannelReadAndPoll2(HCkSsh cHandle, int channelNum, int pollTimeoutMs, int maxNumBytes);
BOOL CkSsh_ChannelReceiveToClose(HCkSsh cHandle, int channelNum);
BOOL CkSsh_ChannelReceiveUntilMatch(HCkSsh cHandle, int channelNum, const char *matchPattern, const char *charset, BOOL caseSensitive);
BOOL CkSsh_ChannelReceiveUntilMatchN(HCkSsh cHandle, int channelNum, HCkStringArray matchPatterns, const char *charset, BOOL caseSensitive);
BOOL CkSsh_ChannelReceivedClose(HCkSsh cHandle, int channelNum);
BOOL CkSsh_ChannelReceivedEof(HCkSsh cHandle, int channelNum);
BOOL CkSsh_ChannelReceivedExitStatus(HCkSsh cHandle, int channelNum);
BOOL CkSsh_ChannelSendClose(HCkSsh cHandle, int channelNum);
BOOL CkSsh_ChannelSendData(HCkSsh cHandle, int channelNum, HCkByteData data);
BOOL CkSsh_ChannelSendEof(HCkSsh cHandle, int channelNum);
BOOL CkSsh_ChannelSendString(HCkSsh cHandle, int channelNum, const char *strData, const char *charset);
void CkSsh_ClearTtyModes(HCkSsh cHandle);
BOOL CkSsh_Connect(HCkSsh cHandle, const char *hostname, int port);
void CkSsh_Disconnect(HCkSsh cHandle);
int CkSsh_GetChannelExitStatus(HCkSsh cHandle, int channelNum);
int CkSsh_GetChannelNumber(HCkSsh cHandle, int index);
BOOL CkSsh_GetChannelType(HCkSsh cHandle, int index, HCkString outStr);
void CkSsh_GetReceivedData(HCkSsh cHandle, int channelNum, HCkByteData outBytes);
BOOL CkSsh_GetReceivedDataN(HCkSsh cHandle, int channelNum, int numBytes, HCkByteData outBytes);
int CkSsh_GetReceivedNumBytes(HCkSsh cHandle, int channelNum);
void CkSsh_GetReceivedStderr(HCkSsh cHandle, int channelNum, HCkByteData outBytes);
BOOL CkSsh_GetReceivedText(HCkSsh cHandle, int channelNum, const char *charset, HCkString outStr);
BOOL CkSsh_GetReceivedTextS(HCkSsh cHandle, int channelNum, const char *substr, const char *charset, HCkString outStr);
int CkSsh_OpenCustomChannel(HCkSsh cHandle, const char *channelType);
int CkSsh_OpenDirectTcpIpChannel(HCkSsh cHandle, const char *hostname, int port);
int CkSsh_OpenSessionChannel(HCkSsh cHandle);
BOOL CkSsh_PeekReceivedText(HCkSsh cHandle, int channelNum, const char *charset, HCkString outStr);
BOOL CkSsh_ReKey(HCkSsh cHandle);
BOOL CkSsh_SaveLastError(HCkSsh cHandle, const char *filename);
BOOL CkSsh_SendIgnore(HCkSsh cHandle);
BOOL CkSsh_SendReqExec(HCkSsh cHandle, int channelNum, const char *command);
BOOL CkSsh_SendReqPty(HCkSsh cHandle, int channelNum, const char *xTermEnvVar, int widthInChars, int heightInRows, int pixWidth, int pixHeight);
BOOL CkSsh_SendReqSetEnv(HCkSsh cHandle, int channelNum, const char *name, const char *value);
BOOL CkSsh_SendReqShell(HCkSsh cHandle, int channelNum);
BOOL CkSsh_SendReqSignal(HCkSsh cHandle, int channelNum, const char *signalName);
BOOL CkSsh_SendReqSubsystem(HCkSsh cHandle, int channelNum, const char *subsystemName);
BOOL CkSsh_SendReqWindowChange(HCkSsh cHandle, int channelNum, int widthInChars, int heightInRows, int pixWidth, int pixHeight);
BOOL CkSsh_SendReqX11Forwarding(HCkSsh cHandle, int channelNum, BOOL singleConnection, const char *authProt, const char *authCookie, int screenNum);
BOOL CkSsh_SendReqXonXoff(HCkSsh cHandle, int channelNum, BOOL clientCanDo);
BOOL CkSsh_SetTtyMode(HCkSsh cHandle, const char *name, int value);
BOOL CkSsh_UnlockComponent(HCkSsh cHandle, const char *unlockCode);
const char *CkSsh_channelOpenFailReason(HCkSsh cHandle);
const char *CkSsh_clientIdentifier(HCkSsh cHandle);
const char *CkSsh_disconnectReason(HCkSsh cHandle);
const char *CkSsh_getChannelType(HCkSsh cHandle, int index);
const char *CkSsh_getReceivedText(HCkSsh cHandle, int channelNum, const char *charset);
const char *CkSsh_getReceivedTextS(HCkSsh cHandle, int channelNum, const char *substr, const char *charset);
const char *CkSsh_hostKeyFingerprint(HCkSsh cHandle);
const char *CkSsh_httpProxyAuthMethod(HCkSsh cHandle);
const char *CkSsh_httpProxyHostname(HCkSsh cHandle);
const char *CkSsh_httpProxyPassword(HCkSsh cHandle);
const char *CkSsh_httpProxyUsername(HCkSsh cHandle);
const char *CkSsh_lastErrorHtml(HCkSsh cHandle);
const char *CkSsh_lastErrorText(HCkSsh cHandle);
const char *CkSsh_lastErrorXml(HCkSsh cHandle);
const char *CkSsh_peekReceivedText(HCkSsh cHandle, int channelNum, const char *charset);
const char *CkSsh_sessionLog(HCkSsh cHandle);
const char *CkSsh_socksHostname(HCkSsh cHandle);
const char *CkSsh_socksPassword(HCkSsh cHandle);
const char *CkSsh_socksUsername(HCkSsh cHandle);
const char *CkSsh_version(HCkSsh cHandle);
#endif
