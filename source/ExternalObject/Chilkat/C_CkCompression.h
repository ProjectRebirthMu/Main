#ifndef _CkCompression_H
#define _CkCompression_H
#include "Chilkat_C.h"

HCkCompression CkCompression_Create(void);
void CkCompression_Dispose(HCkCompression handle);
void CkCompression_getAlgorithm(HCkCompression handle, HCkString retval);
void CkCompression_putAlgorithm(HCkCompression handle, const char *newVal);
void CkCompression_getCharset(HCkCompression handle, HCkString retval);
void CkCompression_putCharset(HCkCompression handle, const char *newVal);
void CkCompression_getEncodingMode(HCkCompression handle, HCkString retval);
void CkCompression_putEncodingMode(HCkCompression handle, const char *newVal);
void CkCompression_getLastErrorHtml(HCkCompression handle, HCkString retval);
void CkCompression_getLastErrorText(HCkCompression handle, HCkString retval);
void CkCompression_getLastErrorXml(HCkCompression handle, HCkString retval);
BOOL CkCompression_getUtf8(HCkCompression handle);
void CkCompression_putUtf8(HCkCompression handle, BOOL newVal);
void CkCompression_getVersion(HCkCompression handle, HCkString retval);
BOOL CkCompression_BeginCompressBytes(HCkCompression handle, HCkByteData bData, HCkByteData out);
BOOL CkCompression_BeginCompressBytesENC(HCkCompression handle, HCkByteData bData, HCkString out);
BOOL CkCompression_BeginCompressString(HCkCompression handle, const char *str, HCkByteData out);
BOOL CkCompression_BeginCompressStringENC(HCkCompression handle, const char *str, HCkString out);
BOOL CkCompression_BeginDecompressBytes(HCkCompression handle, HCkByteData bData, HCkByteData out);
BOOL CkCompression_BeginDecompressBytesENC(HCkCompression handle, const char *str, HCkByteData out);
BOOL CkCompression_BeginDecompressString(HCkCompression handle, HCkByteData bData, HCkString out);
BOOL CkCompression_BeginDecompressStringENC(HCkCompression handle, const char *str, HCkString out);
BOOL CkCompression_CompressBytes(HCkCompression handle, HCkByteData bData, HCkByteData out);
BOOL CkCompression_CompressBytesENC(HCkCompression handle, HCkByteData bData, HCkString out);
BOOL CkCompression_CompressFile(HCkCompression handle, const char *inFile, const char *outFile);
BOOL CkCompression_CompressString(HCkCompression handle, const char *str, HCkByteData out);
BOOL CkCompression_CompressStringENC(HCkCompression handle, const char *str, HCkString out);
BOOL CkCompression_DecompressBytes(HCkCompression handle, HCkByteData bData, HCkByteData out);
BOOL CkCompression_DecompressBytesENC(HCkCompression handle, const char *str, HCkByteData out);
BOOL CkCompression_DecompressFile(HCkCompression handle, const char *inFile, const char *outFile);
BOOL CkCompression_DecompressString(HCkCompression handle, HCkByteData bData, HCkString out);
BOOL CkCompression_DecompressStringENC(HCkCompression handle, const char *str, HCkString out);
BOOL CkCompression_EndCompressBytes(HCkCompression handle, HCkByteData out);
BOOL CkCompression_EndCompressBytesENC(HCkCompression handle, HCkString out);
BOOL CkCompression_EndCompressString(HCkCompression handle, HCkByteData out);
BOOL CkCompression_EndCompressStringENC(HCkCompression handle, HCkString out);
BOOL CkCompression_EndDecompressBytes(HCkCompression handle, HCkByteData out);
BOOL CkCompression_EndDecompressBytesENC(HCkCompression handle, HCkByteData out);
BOOL CkCompression_EndDecompressString(HCkCompression handle, HCkString out);
BOOL CkCompression_EndDecompressStringENC(HCkCompression handle, HCkString out);
BOOL CkCompression_MoreCompressBytes(HCkCompression handle, HCkByteData bData, HCkByteData out);
BOOL CkCompression_MoreCompressBytesENC(HCkCompression handle, HCkByteData bData, HCkString out);
BOOL CkCompression_MoreCompressString(HCkCompression handle, const char *str, HCkByteData out);
BOOL CkCompression_MoreCompressStringENC(HCkCompression handle, const char *str, HCkString out);
BOOL CkCompression_MoreDecompressBytes(HCkCompression handle, HCkByteData bData, HCkByteData out);
BOOL CkCompression_MoreDecompressBytesENC(HCkCompression handle, const char *str, HCkByteData out);
BOOL CkCompression_MoreDecompressString(HCkCompression handle, HCkByteData bData, HCkString out);
BOOL CkCompression_MoreDecompressStringENC(HCkCompression handle, const char *str, HCkString out);
BOOL CkCompression_SaveLastError(HCkCompression handle, const char *filename);
BOOL CkCompression_UnlockComponent(HCkCompression handle, const char *unlockCode);
const char *CkCompression_algorithm(HCkCompression handle);
const char *CkCompression_beginCompressBytesENC(HCkCompression handle, HCkByteData bData);
const char *CkCompression_beginCompressStringENC(HCkCompression handle, const char *str);
const char *CkCompression_beginDecompressString(HCkCompression handle, HCkByteData bData);
const char *CkCompression_beginDecompressStringENC(HCkCompression handle, const char *str);
const char *CkCompression_charset(HCkCompression handle);
const char *CkCompression_compressBytesENC(HCkCompression handle, HCkByteData bData);
const char *CkCompression_compressStringENC(HCkCompression handle, const char *str);
const char *CkCompression_decompressString(HCkCompression handle, HCkByteData bData);
const char *CkCompression_decompressStringENC(HCkCompression handle, const char *str);
const char *CkCompression_encodingMode(HCkCompression handle);
const char *CkCompression_endCompressBytesENC(HCkCompression handle);
const char *CkCompression_endCompressStringENC(HCkCompression handle);
const char *CkCompression_endDecompressString(HCkCompression handle);
const char *CkCompression_endDecompressStringENC(HCkCompression handle);
const char *CkCompression_lastErrorHtml(HCkCompression handle);
const char *CkCompression_lastErrorText(HCkCompression handle);
const char *CkCompression_lastErrorXml(HCkCompression handle);
const char *CkCompression_moreCompressBytesENC(HCkCompression handle, HCkByteData bData);
const char *CkCompression_moreCompressStringENC(HCkCompression handle, const char *str);
const char *CkCompression_moreDecompressString(HCkCompression handle, HCkByteData bData);
const char *CkCompression_moreDecompressStringENC(HCkCompression handle, const char *str);
const char *CkCompression_version(HCkCompression handle);
#endif
