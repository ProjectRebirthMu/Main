#ifndef _CkMht_H
#define _CkMht_H
#include "Chilkat_C.h"

HCkMht CkMht_Create(void);
void CkMht_Dispose(HCkMht handle);
void CkMht_getBaseUrl(HCkMht handle, HCkString retval);
void CkMht_putBaseUrl(HCkMht handle, const char *newVal);
long CkMht_getConnectTimeout(HCkMht handle);
void CkMht_putConnectTimeout(HCkMht handle, long newVal);
void CkMht_getDebugHtmlAfter(HCkMht handle, HCkString retval);
void CkMht_putDebugHtmlAfter(HCkMht handle, const char *newVal);
void CkMht_getDebugHtmlBefore(HCkMht handle, HCkString retval);
void CkMht_putDebugHtmlBefore(HCkMht handle, const char *newVal);
BOOL CkMht_getDebugTagCleaning(HCkMht handle);
void CkMht_putDebugTagCleaning(HCkMht handle, BOOL newVal);
BOOL CkMht_getEmbedImages(HCkMht handle);
void CkMht_putEmbedImages(HCkMht handle, BOOL newVal);
BOOL CkMht_getEmbedLocalOnly(HCkMht handle);
void CkMht_putEmbedLocalOnly(HCkMht handle, BOOL newVal);
BOOL CkMht_getFetchFromCache(HCkMht handle);
void CkMht_putFetchFromCache(HCkMht handle, BOOL newVal);
long CkMht_getHeartbeatMs(HCkMht handle);
void CkMht_putHeartbeatMs(HCkMht handle, long newVal);
BOOL CkMht_getIgnoreMustRevalidate(HCkMht handle);
void CkMht_putIgnoreMustRevalidate(HCkMht handle, BOOL newVal);
BOOL CkMht_getIgnoreNoCache(HCkMht handle);
void CkMht_putIgnoreNoCache(HCkMht handle, BOOL newVal);
void CkMht_getLastErrorHtml(HCkMht handle, HCkString retval);
void CkMht_getLastErrorText(HCkMht handle, HCkString retval);
void CkMht_getLastErrorXml(HCkMht handle, HCkString retval);
BOOL CkMht_getNoScripts(HCkMht handle);
void CkMht_putNoScripts(HCkMht handle, BOOL newVal);
BOOL CkMht_getNtlmAuth(HCkMht handle);
void CkMht_putNtlmAuth(HCkMht handle, BOOL newVal);
long CkMht_getNumCacheLevels(HCkMht handle);
void CkMht_putNumCacheLevels(HCkMht handle, long newVal);
long CkMht_getNumCacheRoots(HCkMht handle);
BOOL CkMht_getPreferMHTScripts(HCkMht handle);
void CkMht_putPreferMHTScripts(HCkMht handle, BOOL newVal);
void CkMht_getProxy(HCkMht handle, HCkString retval);
void CkMht_putProxy(HCkMht handle, const char *newVal);
void CkMht_getProxyLogin(HCkMht handle, HCkString retval);
void CkMht_putProxyLogin(HCkMht handle, const char *newVal);
void CkMht_getProxyPassword(HCkMht handle, HCkString retval);
void CkMht_putProxyPassword(HCkMht handle, const char *newVal);
long CkMht_getReadTimeout(HCkMht handle);
void CkMht_putReadTimeout(HCkMht handle, long newVal);
void CkMht_getSocksHostname(HCkMht handle, HCkString retval);
void CkMht_putSocksHostname(HCkMht handle, const char *newVal);
void CkMht_getSocksPassword(HCkMht handle, HCkString retval);
void CkMht_putSocksPassword(HCkMht handle, const char *newVal);
int CkMht_getSocksPort(HCkMht handle);
void CkMht_putSocksPort(HCkMht handle, int newVal);
void CkMht_getSocksUsername(HCkMht handle, HCkString retval);
void CkMht_putSocksUsername(HCkMht handle, const char *newVal);
int CkMht_getSocksVersion(HCkMht handle);
void CkMht_putSocksVersion(HCkMht handle, int newVal);
BOOL CkMht_getUpdateCache(HCkMht handle);
void CkMht_putUpdateCache(HCkMht handle, BOOL newVal);
BOOL CkMht_getUseCids(HCkMht handle);
void CkMht_putUseCids(HCkMht handle, BOOL newVal);
BOOL CkMht_getUseFilename(HCkMht handle);
void CkMht_putUseFilename(HCkMht handle, BOOL newVal);
BOOL CkMht_getUseIEProxy(HCkMht handle);
void CkMht_putUseIEProxy(HCkMht handle, BOOL newVal);
BOOL CkMht_getUseInline(HCkMht handle);
void CkMht_putUseInline(HCkMht handle, BOOL newVal);
BOOL CkMht_getUtf8(HCkMht handle);
void CkMht_putUtf8(HCkMht handle, BOOL newVal);
void CkMht_getVersion(HCkMht handle, HCkString retval);
void CkMht_getWebSiteLogin(HCkMht handle, HCkString retval);
void CkMht_putWebSiteLogin(HCkMht handle, const char *newVal);
void CkMht_getWebSitePassword(HCkMht handle, HCkString retval);
void CkMht_putWebSitePassword(HCkMht handle, const char *newVal);
void CkMht_AddCacheRoot(HCkMht handle, const char *dir);
void CkMht_AddCustomHeader(HCkMht handle, const char *name, const char *value);
void CkMht_AddExternalStyleSheet(HCkMht handle, const char *url);
void CkMht_ClearCustomHeaders(HCkMht handle);
void CkMht_ExcludeImagesMatching(HCkMht handle, const char *pattern);
BOOL CkMht_GetAndSaveEML(HCkMht handle, const char *url, const char *emlFilename);
BOOL CkMht_GetAndSaveMHT(HCkMht handle, const char *url, const char *mhtFilename);
BOOL CkMht_GetAndZipEML(HCkMht handle, const char *url, const char *zipEntryFilename, const char *zipFilename);
BOOL CkMht_GetAndZipMHT(HCkMht handle, const char *url, const char *zipEntryFilename, const char *zipFilename);
BOOL CkMht_GetCacheRoot(HCkMht handle, int index, HCkString str);
BOOL CkMht_GetEML(HCkMht handle, const char *url, HCkString eml);
HCkEmail CkMht_GetEmail(HCkMht handle, const char *url);
BOOL CkMht_GetMHT(HCkMht handle, const char *url, HCkString mht);
HCkMime CkMht_GetMime(HCkMht handle, const char *url);
BOOL CkMht_HtmlToEML(HCkMht handle, const char *htmlText, HCkString eml);
BOOL CkMht_HtmlToEMLFile(HCkMht handle, const char *html, const char *emlFilename);
HCkEmail CkMht_HtmlToEmail(HCkMht handle, const char *htmlText);
BOOL CkMht_HtmlToMHT(HCkMht handle, const char *htmlText, HCkString mht);
BOOL CkMht_HtmlToMHTFile(HCkMht handle, const char *html, const char *mhtFilename);
BOOL CkMht_IsUnlocked(HCkMht handle);
void CkMht_RemoveCustomHeader(HCkMht handle, const char *name);
void CkMht_RestoreDefaults(HCkMht handle);
BOOL CkMht_SaveLastError(HCkMht handle, const char *filename);
BOOL CkMht_UnlockComponent(HCkMht handle, const char *unlockCode);
BOOL CkMht_UnpackMHT(HCkMht handle, const char *mhtFilename, const char *unpackDir, const char *htmlFilename, const char *partsSubDir);
BOOL CkMht_UnpackMHTString(HCkMht handle, const char *mhtContents, const char *unpackDir, const char *htmlFilename, const char *partsSubDir);
const char *CkMht_baseUrl(HCkMht handle);
const char *CkMht_debugHtmlAfter(HCkMht handle);
const char *CkMht_debugHtmlBefore(HCkMht handle);
const char *CkMht_getCacheRoot(HCkMht handle, int index);
const char *CkMht_getEML(HCkMht handle, const char *url);
const char *CkMht_getMHT(HCkMht handle, const char *url);
const char *CkMht_htmlToEML(HCkMht handle, const char *htmlText);
const char *CkMht_htmlToMHT(HCkMht handle, const char *htmlText);
const char *CkMht_lastErrorHtml(HCkMht handle);
const char *CkMht_lastErrorText(HCkMht handle);
const char *CkMht_lastErrorXml(HCkMht handle);
const char *CkMht_proxy(HCkMht handle);
const char *CkMht_proxyLogin(HCkMht handle);
const char *CkMht_proxyPassword(HCkMht handle);
const char *CkMht_socksHostname(HCkMht handle);
const char *CkMht_socksPassword(HCkMht handle);
const char *CkMht_socksUsername(HCkMht handle);
const char *CkMht_version(HCkMht handle);
const char *CkMht_webSiteLogin(HCkMht handle);
const char *CkMht_webSitePassword(HCkMht handle);
#endif
