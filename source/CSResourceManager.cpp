//////////////////////////////////////////////////////////////////////////
//  
//  
//  
//  
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//  INCLUDE.
//////////////////////////////////////////////////////////////////////////
#include "stdafx.h"

//#include "UIWindows.h"
#include "Public.h"
#include "ZzzOpenglUtil.h"
#include "ZzzBMD.h"
#include "ZzzInfomation.h"
#include "ZzzObject.h"
#include "ZzzCharacter.h"
#include "ZzzLodTerrain.h"
#include "ZzzTexture.h"
#include "ZzzAi.h"
#include "ZzzEffect.h"
#include "DSPlaySound.h"
#include "WSClient.h"
#include "CSResourceManager.h"

#ifdef RESOURCE_MANAGER

//////////////////////////////////////////////////////////////////////////
//  Static Variable
//////////////////////////////////////////////////////////////////////////
static  CSResourceManager   CSRManager;


//////////////////////////////////////////////////////////////////////////
//  FUNCTION.
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//  CSResourceBuffer
//////////////////////////////////////////////////////////////////////////
CSResourceBuffer::CSResourceBuffer ()
{
    m_bFill = false;
    m_iCount= 0;
    memset ( m_iTexTypeList, 0, sizeof( int )*MAX_TEX_BUFFER*2 );
}


//////////////////////////////////////////////////////////////////////////
//  
//////////////////////////////////////////////////////////////////////////
CSResourceBuffer::~CSResourceBuffer ()
{
}


//////////////////////////////////////////////////////////////////////////
//  리소스 버퍼의 값들을 모두 제거한다.
//////////////////////////////////////////////////////////////////////////
void    CSResourceBuffer::Reset ( void )
{
    memset ( m_iTexTypeList, 0, sizeof( int )*m_iCount*2 );

    m_bFill     = false;
    m_iCount    = 0;
}


//////////////////////////////////////////////////////////////////////////
//  
//////////////////////////////////////////////////////////////////////////
int     CSResourceBuffer::GetNum ( void )
{
    return m_iCount;
}


//////////////////////////////////////////////////////////////////////////
//  리소스 인덱스를 추가한다.
//////////////////////////////////////////////////////////////////////////
void    CSResourceBuffer::InsertResource ( int Type, int index )
{
    m_bFill = true;
    int offset;
    for ( int i=0; i<m_iCount; ++i )
    {
        //  같은 텍스쳐 타입인가?
        if ( m_iTexTypeList[i][0]==Type )
        {
            offset = m_iTexTypeList[i][1];

            m_iTexTypeList[i][1]++;
            m_iIndexList[i][offset] = index;
            return;
        }
    }
    offset = m_iTexTypeList[m_iCount][1];
    
    m_iTexTypeList[m_iCount][0] = Type;
    m_iTexTypeList[m_iCount][1]++;
    m_iIndexList[m_iCount][offset] = index;

    m_iCount++;
}


//////////////////////////////////////////////////////////////////////////
//  CSResourceParticle
//////////////////////////////////////////////////////////////////////////
void    CSResourceParticle::RenderList ( BYTE byRenderOneMore )
{
#ifdef RESOURCE_MANAGER
    int offset;
    int index;
    for ( int i=0; i<m_iCount; ++i )
    {
        offset = m_iTexTypeList[i][1];
        for ( int j=0; j<offset; ++j )
        {
            index = m_iIndexList[i][j];
            RenderParticle ( index, &Particles[index], byRenderOneMore );
        }
    }
#endif// RESOURCE_MANAGER
}


//////////////////////////////////////////////////////////////////////////
//  CSResourceParticle
//////////////////////////////////////////////////////////////////////////
void    CSResourceJoint ::RenderList ( BYTE byRenderOneMore )
{
#ifdef RESOURCE_MANAGER
    int offset;
    int index;
    for ( int i=0; i<m_iCount; ++i )
    {
        offset = m_iTexTypeList[i][1];
        for ( int j=0; j<offset; ++j )
        {
            index = m_iIndexList[i][j];
            RenderJoint ( index, &Joints[index], byRenderOneMore );
        }
    }
#endif// RESOURCE_MANAGER
}


//////////////////////////////////////////////////////////////////////////
//  CSResourceParticle
//////////////////////////////////////////////////////////////////////////
void    CSResourceEffect ::RenderList ( BYTE byRenderOneMore )
{
#ifdef RESOURCE_MANAGER
#endif// RESOURCE_MANAGER
}


//////////////////////////////////////////////////////////////////////////
//  CSResourceManager.
//////////////////////////////////////////////////////////////////////////
CSResourceManager::CSResourceManager ()
{
//    m_csParticle = new CSResourceParticle ();
//    m_csJoint = new CSResourceJoint ();
//    m_csEffect;
}


//////////////////////////////////////////////////////////////////////////
//  
//////////////////////////////////////////////////////////////////////////
CSResourceManager::~CSResourceManager ()
{
}


//////////////////////////////////////////////////////////////////////////
//  리소스 정보를 초기화 한다.
//////////////////////////////////////////////////////////////////////////
void    CSResourceManager::Reset ( void )
{
//    m_csParticle->Reset ();
//    m_csEffect->Reset ();
//    m_csJoint->Reset ();
}
#endif// RESOURCE_MANAGER

