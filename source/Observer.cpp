//*****************************************************************************
// File: Observer.cpp
//
// Desc: implementation of the CObserver, CSubject class.
//
// producer: Ahn Sang-Kyu
//*****************************************************************************

#include "stdafx.h"
#include "Observer.h"

//*****************************************************************************
// CObserver
//*****************************************************************************

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CObserver::CObserver()
{

}

CObserver::~CObserver()
{

}


//*****************************************************************************
// CSubject
//*****************************************************************************

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CSubject::CSubject()
{

}

CSubject::~CSubject()
{

}

//*****************************************************************************
// 함수 이름 : Attach()
// 함수 설명 : 옵져버 리스트에 추가.
//			   (서브젝트 자식 클래스 생성시 호출하는 것이 적당.)
// 매개 변수 : pObserver	: 옵져버 오브젝트의 포인터.
//*****************************************************************************
void CSubject::Attach(CObserver* pObserver)
{
	m_ObserverList.AddTail(pObserver);
}

//*****************************************************************************
// 함수 이름 : Attach()
// 함수 설명 : 옵져버 리스트에서 삭제.
//			   (서브젝트 자식 클래스 릴리즈 전에 호출하는 것이 적당.)
// 매개 변수 : pObserver	: 옵져버 오브젝트의 포인터.
//*****************************************************************************
void CSubject::Detach(CObserver* pObserver)
{
	NODE* pPos = m_ObserverList.Find(pObserver);
	if (pPos)
		m_ObserverList.RemoveAt(pPos);
}

//*****************************************************************************
// 함수 이름 : Notify()
// 함수 설명 : 리스트를 순회하며 옵저버의 UpdateData(this)호출.
//			   (서브젝트 내용 변화가 있을 때 호출하면 됨.)
//*****************************************************************************
void CSubject::Notify()
{
	CObserver* pObserver;
	NODE* pPos = m_ObserverList.GetHeadPosition();
	while (pPos)
	{
		pObserver = (CObserver*)m_ObserverList.GetNext(pPos);
		pObserver->UpdateData(this);
	}
}